PUC-Minas - ICEI - Ciência da Computação
Algoritmos e Estruturas de Dados I - Aula 2024-1_001
Anotações
___

Resumo da semana

Apresentação da disciplina

    Ementa
    Plano de ensino (provisório) -> Monitoramento
    Cronograma      (provisório)
    Avaliação
    Materiais / Ferramentas
      Compiladores
        C
        C++
    Rotinas
      Preparação para os  guias -> Estudos Dirigidos
      Aulas
      Desenvolvimento dos guias
      
___

Horário Semanal 2024-1 - ICEI - DCC - Disponibilidade 
                                                      
            Segunda   Terça   Quarta   Quinta   Sexta 
						      
07:00-08:40   _____   _____    _____     AED1    ICEI 
                                        T1-G4         
08:50-10:30   AED1     ARQ1    AED1      ARQ1     DCC 
             Teoria   Teoria  Teoria    Teoria        
10:40-12:20   AED1     AED1    AED1      ICEI     DCC 
             T2-G1    T2-G2   T2-G3                   
                                                      
13:30-15:10   _____    ARQ1    _____     ARQ1    _____
                      Teoria            Teoria        
15:20-17:00   AED1    _____    AED1      AED1    _____
             Teoria           Teoria    T1-G3         
17:10-18:50   AED1    _____    AED1      DCC          
             T1-G1            T1-G2                   
                                                      
19:00-20:40   _____   _____    _____    _____    _____
                                                      
20:50-22:30   _____   _____    _____    _____    _____
 

___

Microsoft Sharepoint:

AREA COMUM
https://sgapucminasbr.sharepoint.com/sites/ICEI/Repositrio/Forms/AllItems.aspx?ga=1&id=%2Fsites%2FICEI%2FRepositrio%2FICEI%2FInform%C3%A1tica%2FALUNO%2FAREA%20COMUM%2FAED1&viewid=aca8df2f%2D6f64%2D456b%2Db74f%2De592ac89d1ab

___

PUx_VM

https://sgapucminasbr-my.sharepoint.com/:u:/g/personal/104103_sga_pucminas_br/EUy-oNEZYQVPmWy0FDRR_1ABv7th0QpY5cfBK-Z8JR_UHQ?e=9233HZ

___

MS_Teams

Turno Manhã

https://teams.microsoft.com/l/team/19%3AAfbn3AN1XpygpnvcOwgW9HuODdr7T3GTeaMoln2ks981%40thread.tacv2/conversations?groupId=7aa05964-8feb-4a0a-907a-444316ea2c3d&tenantId=14cbd5a7-ec94-46ba-b314-cc0fc972a161

Turno Tarde

https://teams.microsoft.com/l/team/19%3A30_O8ORC7i5ljJwoIJsOLPROntFDnB2lIKPhl4dmQQ01%40thread.tacv2/conversations?groupId=4c27f2d2-b6a6-4e7b-a001-18779323658c&tenantId=14cbd5a7-ec94-46ba-b314-cc0fc972a161

___

Monitoria/MS_Teams

https://teams.microsoft.com/l/team/19%3a661bb1a5edde4a549732770e3f11c507%40thread.tacv2/conversations?groupId=c33fc4dd-c1ee-402b-b743-d4f295deb385&tenantId=14cbd5a7-ec94-46ba-b314-cc0fc972a161

___

Dicas de etiqueta para conferências remotas

01. Educação e bom senso.
    Ser cordial e
    participar colaborativamente.
02. Minimizar distrações.
    Manter microfone fechado.
    Solicitar seu uso, se necessário.
03. Compor mensagem em separado, primeiro,
    e, depois, copiar para o campo do chat.
  
___

Computer Education - Ethics

https://www.acm.org/code-of-ethics
https://www.computer.org/education/code-of-ethics
https://dcc.ufrj.br/~jonathan/compsoc/Codigo%20de%20Etica%20e%20Conduta%20Profissional%20da%20ACM.htm

___

Algoritmos e estruturas de dados

             (atributos)                 (métodos)
algoritmo =   dados            +          ações
(descrição)   |                           |
              |_ simples                  |
              |  |_ lógicos               |_ funções
              |  |_ caracteres            |_ procedimentos
              |  |_ números               |
              |  |  |_ inteiros           |
              |  |  |_ reais              |
              |_ grupos                   |_ construtores (*POO)
                 |_ caracteres (cadeias)  |_ destrutores  (*POO)
                 |_ "strings"  (*POO)     |_ operadores   (*POO)
                 |_ arranjos
                 |_ matrizes
                 |_ tabelas

Tipos de métodos

funções      = descrição de ação
               ou bloco de ações 
               para obter valor como resultado
procedimento = descrição de ação
               ou bloco de ações

(*POO) com Programação Orientada a Objetos

___

Desenvolvimento baseado em testes (TDD = "Test-Driven Development")

          análise             síntese
problema --------> algoritmo --------> solução
    ^                  ^                  |  teste
    |                  |                  v          
    +<-----------------+<-----------------+


Desenvolvimento progressivo (P-A-S-T)
    
                        ^
         Planejamento   |     Análise 
                +------>|------>+      
 acréscimo de   |       |       |
 conhecimento   |   +-->|-->+   |
           |<-->|   |   |   |   |
        <--*----|---o<--+-------|------->
           ^    |       |   |   |
           |    +<------|<--+   |
           |            |       v
           +<-----------|<------+
              Teste     |     Síntese

___
___

Observações sobre programar (= descrever com regras):

Recomendações ao programador:

* DEFINIR   : definir antes de usar
              requisitos/dados/resultados
              métodos (funções/procedimentos)
              critérios para avaliação
* PLANEJAR  : analisar o problema
              escolher estratégia/fórmulas
              estabelecer cronograma/etapas
              construção/integração
* TESTAR    : verificar é INDISPENSÁVEL
              definir casos de uso
              planejar testes com antecedência
              registrar dados/resultados
* DOCUMENTAR: comentar é mais do que recomendável
              estabelecer o objetivo, 
              guardar a análise de relações entre dados e ações, 
              identificar padrões, 
              sintetizar as ações,
              estabelecer as formas de verificação dos resultados

___

                   Paradigmas de Linguagens de Programação
                         /                      \ 
              Imperativas                       Declarativas
             /     |     \                      /     |     \
Procedimental  Orientada  Paralela     Funcional   Lógica    Bases 
               a Objetos                                    de dados
               
                         Linguagens de Programação
               
                                 alto nível
                       _____________________________
                      |      Linguagem Natural      |     
                      |         ou Gráfica          |
                      |_____________________________|
                      | Orientada    |   Funcional  |
                      | a Objetos    |              |
                      |    _________/ \_________    |
                      |   |                     |   |
                      |   |    Procedimental    |   |
                      |   |  _________________  |   |
                      |   | |   Estruturada   | |   |
                      |___|_|_________________|_|___|
                      |                             |
                      |    Linguagem  de  Máquina   |
                      |_____________________________|
                             
                                baixo nível

___                               
                       Linguagem de Programação C
                       
                             Procedimental
                                   |
                     Uso geral     |     Nível médio/alto
                              \    |    /
             Extensível --- Características ---  Modular
                              /    |    \
               Tipos estáticos     |     Biblioteca de funções
                                   |
                        (+) Rápida e eficiente
___
                        Linguagem de Programação C++
                       
                           Orientação a objetos
                                   |
                     Uso geral     |     Nível alto
                              \    |    /
             Extensível --- Características ---  Modular
                              /    |    \
               Tipos estáticos     |     Biblioteca de classes/funções
                                   |
                        (-) Rápida e eficiente

___

Itens de linguagem de programação:

- comentário = informação para o autor/leitor (não é comando)
  //  texto_em_linha
  
  /*  texto 
      em 
      linhas */
      
  /** texto 
      para 
      documentacao automatica/resumo */

- tipos de dados (C/C++)

  bool             - lógico
  char             - caractere
  short, int, long - inteiro (curto, normal, longo)
  float, double    - reais   (precisão simples ou dupla)

  char*            - cadeia de caracteres

  Forma de descrever:
  
  tipo nome = valor; // nome recebera' copia do valor

  tipo nome;
  nome = valor;              // forma alternativa
  
  
  Exemplos:
   
  int controle1 = 1;         // definir nome e valor inicial
  
  int controle2;             // definir nome
  controle2     = 2;         // definir valor inicial
  
  int controles1 [] = {1,2}; // definir arranjo (grupo)

  int controles2 [2];        // definir arranjo (grupo)
  controles[1] = 1;
  controles[2] = 2;

- definir ação/método (função ou procedimento):

  função       -> tipo_de_valor     // retorno
                 (lógico    = bool, 
                  caractere = char, 
                  inteiro   = int, 
                  real      = double) 
                  
  Forma de descrever:
  
  tipo nome ( lista_de_parametros ) // cabecalho ("header")/assinatura 
  {                                 // corpo
    // definicoes_de_dados 
    // e/ou 
    // bloco_de_acoes
    return ( valor );    
  }

  procedimento -> nenhum_valor a retornar (void = vazio em valor)
  
  Forma de descrever:
  
  void nome ( lista_de_parametros ) // cabecalho ("header")/assinatura 
  {                                 // corpo
    // definicoes_de_dados 
    // e/ou 
    // bloco_de_acoes 
  }

- bloco_de_ações:
  { 
    acao1( ); acao2( );
    acao3( );    
    ... 
    acaoN( ); 
  } 

- ação = verbo( );
  ou
  ação = verbo(complemento);
  
- comando = descrição do que deverá ser executado

  acao( );         // sentenca = sujeito   (oculto) 
                   //          + predicado (procedimental)
  
  ou 
  
  objeto->acao( ); // sentenca = sujeito  
                   //          + predicado (*POO)

- classe (*POO)  = { definições_de_dados e/ou definições_de_ações }  

  
- estruturas de controle para o fluxo de ações:

  - sequência
  
    { 
      acao1( ); acao2( );
      acao3( );    
      ... 
      acaoN( ); 
    } 
    
  - alternativas
  
    - simples (escolher entre fazer ou não fazer)
    
        acao1( );
        // fazer, ou nao
        if ( condicao )
        { // condicao verdadeira
          acao2( );
          acao3( );    
          ... 
          acaoM( ); 
        } // end if
        // condição falsa
        acaoN( );    

    - dupla (escolher entre fazer isso ou aquilo)
    
        acao1( );
        // fazer isso, ou aquilo
        if ( condicao )
        { // condicao verdadeira
          acao2( );
        }
        else
        { // condicao falsa
          acao3( );    
        } // end if
        acaoN( );    

  - repetição

    - sem controle
    
        acao1( );

        acao2( );
        acao2( ); // fazer de novo
        acao2( ); // fazer mais uma vez

        acao3( );

    - com controle antes de fazer (abordagem preventiva)
    
        int controle = 0;        // valor inicial (1)

        acao1( );
        //      condicao (2)
        while ( controle < 3 )   // teste/condicao
        { // condicao verdadeira
          // bloco a ser repetido
          acao2( );
          // variacao (3)
          controle = controle+1; // variacao   
        }
        // condicao falsa
        acao3( );

    - com controle antes de fazer e com variação crescente
    
        int controle = 0;
        
        acao1( );
        //    valor inicial condicao     variacao
        for ( controle = 1; controle<=3; controle=controle+1 )
        { // condicao verdadeira
          // bloco a ser repetido
          acao2( );
        }
        // condicao falsa
        acao3( );

    - com controle antes de fazer e com variação decrescente
    
        int controle = 0;
        
        acao1( );
        //    valor inicial condicao     variacao
        for ( controle = 3; controle>=1; controle=controle-1 )
        { // condicao verdadeira
          // bloco a ser repetido
          acao2( );
        }
        // condicao falsa
        acao3( );

    - com controle após de fazer (abordagem corretiva)
    
        int controle = 0; // valor inicial (1)
        
        acao1( );

        do
        { // condicao verdadeira
          // bloco a ser repetido
          acao2( );
          // variacao (3)
          controle = controle+1;   
        }
        while ( controle<3 ); // condicao (2)
        // condicao falsa
        acao3( );

___

Atividade prática em laboratório

Ambiente operacional Windows/Linux com GCC

Windows
Testar a instalação abrir uma janela de comandos (prompt):

Menu Iniciar
|_ Executar: cmd

Após a abertura da janela/console/terminal:

Windows
C:\___ > gcc -v

ou
Linux

____ ~$> gcc -v

E aguardar resposta indicando a versão (13.2.0, ou próxima).

Para testar o compilador para C++

Windows
C:\___ > g++ -v

ou
Linux

____ ~$> g++ -v

E aguardar resposta semelhante à anterior.

Nota: Em caso de falha, verificar a variável de ambiente PATH.


___

Construção de programa

01. Criar uma pasta com a seguinte identificação

    Matrícula_Nome

    Exemplo:

Windows
C:\___ > mkdir 999999_PUCMG_DCC_AED1

ou 

Linux
____ ~$> mkdir 999999_PUCMG_DCC_AED1


02. Localizar-se nessa pasta

Windows
____ ~$> cd 999999_PUCMG_DCC_AED1

C:\___ > dir

Linux
____ ~$> cd 999999_PUCMG_DCC_AED1

____ ~$> ls

OBS.: Notar as seguintes indicações

      <DIR>  . // referência para a própria pasta
      <DIR> .. // referência para a pasta que a contém

       Em Windows:
          
       <DIR> \  // referência para a pasta raiz

       Em Linux:
          
       <DIR> /  // referência para a pasta raiz
       <DIR> ~  // referência para a pasta pessoal
          
03. Abrir o editor de textos

Windows
C:\___ > notepad template.c

ou 

Linux
_____ /~$ nano   template.c

04. Editar e salvar o programa com o nome template.c

// 999999_PUCMG_DCC_AED1

#include <stdio.h>

int main ( void )
{
 // identificar
    printf ( "999999_PUCMG_DCC_AED1\n" );
 // encerrar
    printf ( "Apertar ENTER para terminar.\n" );
    getchar( );
    return ( 0 );
}

05. Fechar o editor de textos e voltar ao prompt.

06. Compilar o programa

Windows
C:\___ > gcc -o template template.c

ou 

Linux
____ ~$> gcc -o template template.cpp

07. Se houver erros, editar o programa novamente
    e  compilar a versão editada; senão, prosseguir.

08. Executar o programa

C:\___ > .\template

ou 

Linux
____ ~$> ./template

09. Observar a saída

Windows/Linux

999999_PUCMG_DCC_AED1
Apertar ENTER para terminar

10. Recomenda-se copiar a versão atual do programa
    modificar o nome, antes de realizar outras alterações.

Windows
C:\___ > copy template.c template_01.c

ou
Linux
____ ~$> cp   template.c template_01.c

11. Abrir o programa no editor de textos e
    inserir novos comandos e definições

// 999999_PUCMG_DCC_AED1

#include <stdio.h>   // biblioteca para entrada/saida
#include <stdbool.h> // biblioteca para tipo logico

/**
   Acao principal.
*/
int main ( void )
{
 // definir dados
    bool   b = false;
    char   c = 'A';
    int    x =  5 ;
    double d = 0.5;

 // identificar
    printf ( "999999_PUCMG_DCC_AED1\n" );
 // acoes
 // mostrar valores
    printf ( "b = %d\n" , b );
    printf ( "c = %c\n" , c );
    printf ( "x = %i\n" , x );
    printf ( "d = %lf\n", d );
 // encerrar  
    printf ( "Apertar ENTER para terminar.\n" );
    getchar( );
    return ( 0 );
}

/*
    Formatos mais usados para dados:
    %c  - mostrar caractere
    %d  - mostrar valor inteiro decimal
    %i  - mostrar valor inteiro
    %f  - mostrar valor real (precisão simples)
    %lf - mostrar valor real (precisão dupla  )
    %s  - mostrar caracteres
    
    \n  - mudar de linha
    \t  - inserir espaços/tabulação
*/

12. Compilar e testar.
    Observar o resultado.
    Se desejado, inserir outros comandos;
    senão, parar.
    
___

Resumo de comandos de sistema

Windows  Linux
cmd      terminal      - abrir janela de comandos ( prompt )
         (bash)

dir      dir           - mostrar o conteúdo da pasta atual
                         Variantes:
                         dir \          - mostrar a pasta raiz (Windows)
                         dir /          - mostrar a pasta raiz ( Linux )
                         dir .          - mostrar a pasta atual
                         dir ..         - mostrar a pasta superior
         ls            - mostrar com destaques coloridos
                         Variantes:
                         ls -l          - mostrar permissões
                                          (usuário/grupo/sistema)
                                          d - para diretório
                                          r - para ler
                                          w - para escrever
                                          x - para executar

mkdir    mkdir         - criar pasta
                         mkdir pasta

cd                     - deslocar-se para a pasta
                         Variantes:
                         cd             - ir para a pasta   local
                         cd             - mostrar a posição atual
                         cd  .          - ficar  na posição atual
                         cd ..          - ir para a pasta superior
                         cd \           - ir para a pasta raiz (Windows)
                         cd /           - ir para a pasta raiz ( Linux )
                                        
notepad  micro         - abrir editor de textos
         nano            Variante:
         vi              notepad prog.c - editar arquivo existente

gcc      gcc           - compilar (linguagem C  )
g++      g++             compilar (linguagem C++)
                         Variantes:
                         gcc -v
                         gcc -o prog.exe prog.c
                         gcc -o prog     prog.c
                         g++ -o nome.exe nome.cpp
                         g++ -o nome     nome.cpp

copy     cp            - copiar   arquivo
                         Variantes:
                         copy nome.c nome_01.c
                         copy nome.c pasta
                         copy nome.c pasta\nome_01.c   (Windows)
                         cp   nome.c nome_01.c
                         cp   nome.c pasta
                         cp   nome.c pasta/nome_01.c   ( Linux )
                                         
ren      mv            - renomear arquivo
                         Variantes:
                         ren   nome.c novo.c
                         mv    nome.c novo.c
                                          
del      rm -f         - apagar   arquivo
                         Variantes:
                         del nome.txt     - apagar arquivo
                         del *.exe        - apagar todos os executáveis
                         del *.o          - apagar intermediários
                         rm -f nome.txt
                                          
move     mv            - mover arquivo para pasta
                         Variantes:
                         move nome.c pasta - mover arquivo 
                         move *.c    pasta - mover arquivos fontes
                         mv   *.*    pasta - mover todos os arquivos
                         
___    
